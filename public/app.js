class App extends React.Component {
  constructor(props) {
    super(props);
    this.addMovie = this.addMovie.bind(this);
    this.searchMovie = this.searchMovie.bind(this);
    this.state = {
      movieList: [],
      filteredMovieList: [],
      searchResultsNull: false
    };
  }

  componentDidMount() {
    this.setState({
      filteredMovieList: this.state.movieList
    });
  }

  addMovie() {
    var inputMovie = document.getElementById('addInput');
    console.log(inputMovie);
    console.log(inputMovie.value);
    var movieListCopy = this.state.movieList.slice();
    var filteredListCopy = this.state.filteredMovieList.slice();
    movieListCopy.push({
      title: inputMovie.value
    });
    filteredListCopy.push({
      title: inputMovie.value
    });
    this.setState({
      movieList: movieListCopy,
      filteredMovieList: filteredListCopy
    });
  }

  searchMovie() {
    var movies = document.getElementsByClassName('movieTitle');
    var searchInput = document.getElementById('searchInput');
    console.log(searchInput);
    var count = 0;
    var filtered = this.state.filteredMovieList.slice();
    var newFilter = [];

    for (var i = 0; i < movies.length; i++) {
      var movieName = movies[i].innerHTML.toLowerCase();
      var search = searchInput.value.toLowerCase();

      if (movieName.includes(search)) {
        count++;
        newFilter.push({
          title: movies[i].innerHTML
        });
      }

      this.setState({
        filteredMovieList: newFilter
      });
    }
  }

  allMovies() {
    this.setState({
      filteredMovieList: this.state.movieList
    });
  }

  render() {
    return React.createElement("div", null, React.createElement(Search, {
      searchMovie: this.searchMovie
    }), React.createElement(InputMovie, {
      addMovie: this.addMovie
    }), React.createElement("div", null, this.state.searchResultsNull ? "No search results found" : ""), React.createElement("table", {
      className: "movies"
    }, React.createElement("tbody", null, this.state.filteredMovieList.map(movie => React.createElement("tr", null, React.createElement("td", {
      className: "movieTitle"
    }, movie.title), React.createElement("td", {
      className: "movieButton"
    }, React.createElement("button", {
      className: "watched"
    }, "Watched?")))))), React.createElement("button", {
      onClick: this.allMovies.bind(this)
    }, "See All Movies!"));
  }

}

class Search extends React.Component {
  render() {
    return React.createElement("div", null, React.createElement("input", {
      id: "searchInput",
      type: "text",
      defaultValue: "Search..."
    }), React.createElement("input", {
      type: "submit",
      value: "Go!",
      onClick: this.props.searchMovie
    }));
  }

}

class InputMovie extends React.Component {
  render() {
    return React.createElement("div", null, React.createElement("input", {
      id: "addInput",
      type: "text",
      defaultValue: "Add movie title here"
    }), React.createElement("input", {
      type: "submit",
      value: "Add!",
      onClick: this.props.addMovie
    }));
  }

}

ReactDOM.render(React.createElement(App, null), document.getElementById("movieList"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9hcHAuanN4Il0sIm5hbWVzIjpbIkFwcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImFkZE1vdmllIiwiYmluZCIsInNlYXJjaE1vdmllIiwic3RhdGUiLCJtb3ZpZUxpc3QiLCJmaWx0ZXJlZE1vdmllTGlzdCIsInNlYXJjaFJlc3VsdHNOdWxsIiwiY29tcG9uZW50RGlkTW91bnQiLCJzZXRTdGF0ZSIsImlucHV0TW92aWUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY29uc29sZSIsImxvZyIsInZhbHVlIiwibW92aWVMaXN0Q29weSIsInNsaWNlIiwiZmlsdGVyZWRMaXN0Q29weSIsInB1c2giLCJ0aXRsZSIsIm1vdmllcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzZWFyY2hJbnB1dCIsImNvdW50IiwiZmlsdGVyZWQiLCJuZXdGaWx0ZXIiLCJpIiwibGVuZ3RoIiwibW92aWVOYW1lIiwiaW5uZXJIVE1MIiwidG9Mb3dlckNhc2UiLCJzZWFyY2giLCJpbmNsdWRlcyIsImFsbE1vdmllcyIsInJlbmRlciIsIm1hcCIsIm1vdmllIiwiU2VhcmNoIiwiSW5wdXRNb3ZpZSIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxHQUFOLFNBQWtCQyxLQUFLLENBQUNDLFNBQXhCLENBQWtDO0FBQ2hDQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixLQUFLQSxRQUFMLENBQWNDLElBQWQsQ0FBbUIsSUFBbkIsQ0FBaEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLEtBQUtBLFdBQUwsQ0FBaUJELElBQWpCLENBQXNCLElBQXRCLENBQW5CO0FBQ0EsU0FBS0UsS0FBTCxHQUFhO0FBQ1hDLE1BQUFBLFNBQVMsRUFBRSxFQURBO0FBRVhDLE1BQUFBLGlCQUFpQixFQUFFLEVBRlI7QUFHWEMsTUFBQUEsaUJBQWlCLEVB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b0JBQUMsR0FBRCxPQUFoQixFQUF5QnhCLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixXQUF4QixDQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5hZGRNb3ZpZSA9IHRoaXMuYWRkTW92aWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNlYXJjaE1vdmllID0gdGhpcy5zZWFyY2hNb3ZpZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtb3ZpZUxpc3Q6IFtdLFxuICAgICAgZmlsdGVyZWRNb3ZpZUxpc3Q6IFtdLFxuICAgICAgc2VhcmNoUmVzdWx0c051bGw6IGZhbHNlLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmlsdGVyZWRNb3ZpZUxpc3Q6IHRoaXMuc3RhdGUubW92aWVMaXN0LFxuICAgIH0pXG4gIH1cblxuICBhZGRNb3ZpZSgpIHtcbiAgICB2YXIgaW5wdXRNb3ZpZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGRJbnB1dCcpXG4gICAgY29uc29sZS5sb2coaW5wdXRNb3ZpZSk7XG4gICAgY29uc29sZS5sb2coaW5wdXRNb3ZpZS52YWx1ZSk7XG4gICAgdmFyIG1vdmllTGlzdENvcHkgPSB0aGlzLnN0YXRlLm1vdmllTGlzdC5zbGljZSgpO1xuICAgIHZhciBmaWx0ZXJlZExpc3RDb3B5ID0gdGhpcy5zdGF0ZS5maWx0ZXJlZE1vdmllTGlzdC5zbGljZSgpO1xuICAgIG1vdmllTGlzdENvcHkucHVzaCh7dGl0bGU6IGlucHV0TW92aWUudmFsdWV9KTtcbiAgICBmaWx0ZXJlZExpc3RDb3B5LnB1c2goe3RpdGxlOiBpbnB1dE1vdmllLnZhbHVlfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtb3ZpZUxpc3Q6IG1vdmllTGlzdENvcHksXG4gICAgICBmaWx0ZXJlZE1vdmllTGlzdDogZmlsdGVyZWRMaXN0Q29weSxcbiAgICB9KVxuICB9XG5cbiAgc2VhcmNoTW92aWUoKSB7XG4gICAgdmFyIG1vdmllcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vdmllVGl0bGUnKTtcbiAgICB2YXIgc2VhcmNoSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoSW5wdXQnKTtcbiAgICBjb25zb2xlLmxvZyhzZWFyY2hJbnB1dClcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuc3RhdGUuZmlsdGVyZWRNb3ZpZUxpc3Quc2xpY2UoKTtcbiAgICB2YXIgbmV3RmlsdGVyID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb3ZpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtb3ZpZU5hbWUgPSBtb3ZpZXNbaV0uaW5uZXJIVE1MLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgc2VhcmNoID0gc2VhcmNoSW5wdXQudmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChtb3ZpZU5hbWUuaW5jbHVkZXMoc2VhcmNoKSkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBuZXdGaWx0ZXIucHVzaCh7dGl0bGU6IG1vdmllc1tpXS5pbm5lckhUTUx9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaWx0ZXJlZE1vdmllTGlzdDogbmV3RmlsdGVyLFxuICAgICAgfSlcbiAgICB9XG5cblxuICB9XG5cbiAgYWxsTW92aWVzKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmlsdGVyZWRNb3ZpZUxpc3Q6IHRoaXMuc3RhdGUubW92aWVMaXN0LFxuICAgIH0pXG5cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFNlYXJjaCBzZWFyY2hNb3ZpZT17dGhpcy5zZWFyY2hNb3ZpZX0vPlxuICAgICAgICA8SW5wdXRNb3ZpZSBhZGRNb3ZpZT17dGhpcy5hZGRNb3ZpZX0vPlxuICAgICAgICA8ZGl2Pnt0aGlzLnN0YXRlLnNlYXJjaFJlc3VsdHNOdWxsID8gXCJObyBzZWFyY2ggcmVzdWx0cyBmb3VuZFwiIDogXCJcIn08L2Rpdj5cbiAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJtb3ZpZXNcIj5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAge3RoaXMuc3RhdGUuZmlsdGVyZWRNb3ZpZUxpc3QubWFwKChtb3ZpZSkgPT4gKFxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtb3ZpZVRpdGxlXCI+e21vdmllLnRpdGxlfTwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibW92aWVCdXR0b25cIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwid2F0Y2hlZFwiPldhdGNoZWQ/PC9idXR0b24+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICkpfVxuICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICAgIDxidXR0b24gb25DbGljaz17dGhpcy5hbGxNb3ZpZXMuYmluZCh0aGlzKX0+U2VlIEFsbCBNb3ZpZXMhPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxufVxuXG5jbGFzcyBTZWFyY2ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxpbnB1dCBpZD1cInNlYXJjaElucHV0XCIgdHlwZT1cInRleHRcIiBkZWZhdWx0VmFsdWU9XCJTZWFyY2guLi5cIj48L2lucHV0PlxuICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiR28hXCIgb25DbGljaz17dGhpcy5wcm9wcy5zZWFyY2hNb3ZpZX0+PC9pbnB1dD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5cblxuY2xhc3MgSW5wdXRNb3ZpZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGlucHV0IGlkPVwiYWRkSW5wdXRcIiB0eXBlPVwidGV4dFwiIGRlZmF1bHRWYWx1ZT1cIkFkZCBtb3ZpZSB0aXRsZSBoZXJlXCI+PC9pbnB1dD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkFkZCFcIiBvbkNsaWNrPXt0aGlzLnByb3BzLmFkZE1vdmllfT48L2lucHV0PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbn1cblxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW92aWVMaXN0XCIpKTtcblxuXG4iXX0=